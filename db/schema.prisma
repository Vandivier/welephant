generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int            @id @default(autoincrement())
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  name                String?
  email               String         @unique
  hashedPassword      String?
  role                String         @default("USER")
  participantProfiles Participant[]
  parties             Party[]
  sessions            Session[]
  tokens              Token[]
  wishlists           Wishlist[]     @relation("user-wished-list")
  purchasedItems      WishlistItem[] @relation("user-purchased-items")
  wishlistItems       WishlistItem[] @relation("user-wished-items")
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             Int?
  user               User?     @relation(fields: [userId], references: [id])
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  @@unique([hashedToken, type])
}

model WishlistItem {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  name            String
  description     String?
  url             String?
  purchasedAt     DateTime?
  userIdPurchaser Int?
  userIdWisher    Int
  wishlistId      Int
  purchaser       User?     @relation("user-purchased-items", fields: [userIdPurchaser], references: [id])
  wisher          User      @relation("user-wished-items", fields: [userIdWisher], references: [id])
  Wishlist        Wishlist  @relation(fields: [wishlistId], references: [id])
}

model Wishlist {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  name         String
  userIdWisher Int
  notes        String         @default("")
  wisher       User           @relation("user-wished-list", fields: [userIdWisher], references: [id])
  items        WishlistItem[]
}

model Participant {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  name      String
  email     String?
  status    ParticipantStatus @default(PENDING)
  partyId   Int
  userId    Int?
  Party     Party             @relation(fields: [partyId], references: [id])
  User      User?             @relation(fields: [userId], references: [id])
}

model Party {
  id                 Int           @id @default(autoincrement())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  name               String
  notes              String        @default("")
  hasGiftStealing    Boolean
  hasGiftAssignments Boolean
  assignedAt         DateTime?
  eventDate          DateTime?
  location           String        @default("")
  userId             Int
  creator            User          @relation(fields: [userId], references: [id])
  participants       Participant[]
}

enum ParticipantStatus {
  ACCEPTED
  DECLINED
  MAYBE
  PENDING
}
