// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]

  wishlistItems  WishlistItem[] @relation("user-wished-items")
  purchasedItems WishlistItem[] @relation("user-purchased-items")
  wishlist       Wishlist?      @relation("user-wished-list")

  // TODO: uncomment after PG migration
  //
  // WeventYeses  Wevent[] @relation("users-yeses", fields: [weventYesIds], references: [id])
  // weventYesIds Int[]

  // WeventNoes  Wevent[] @relation("users-noes", fields: [weventNoIds], references: [id])
  // weventNoIds Int[]

  // WeventMaybes   Wevent[] @relation("users-maybes", fields: [weventMaybeIds], references: [id])
  // weventMaybeIds Int[]

  // WeventUndeclareds   Wevent[] @relation("users-undeclareds", fields: [weventUndeclaredIds], references: [id])
  // weventUndeclaredIds Int[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model WishlistItem {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  url         String?

  purchaser       User?     @relation(fields: [userIdPurchaser], name: "user-purchased-items", references: [id])
  purchasedAt     DateTime?
  userIdPurchaser Int

  // possibly a redundant field
  // item wisher should always be in sync with wishlist wisher
  wisher       User @relation(fields: [userIdWisher], name: "user-wished-items", references: [id])
  userIdWisher Int

  Wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId Int
}

model Wishlist {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  name      String
  items     WishlistItem[]

  wisher       User @relation(fields: [userIdWisher], name: "user-wished-list", references: [id])
  userIdWisher Int  @unique
}

// TODO: uncomment after PG migration
// model Wevent {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   name      String
//   eventTime DateTime

//   // yeses User[] @relation("users-yeses", fields: [userIdsYes], references: [id])
//   userIdsYes Int[]
//   // @relation(fields:, name: "users-yeses", references: [id])

//   noes User[] @relation(name: "users-noes", references: [id])

//   maybes User[] @relation(name: "users-maybes", references: [id])

//   undeclareds User[] @relation(name: "users-undeclareds", references: [id])

// }
